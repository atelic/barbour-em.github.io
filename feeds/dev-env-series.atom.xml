<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Eric Barbour</title><link href="https://barbour-em.github.io/" rel="alternate"></link><link href="https://barbour-em.github.io/feeds/dev-env-series.atom.xml" rel="self"></link><id>https://barbour-em.github.io/</id><updated>2016-05-27T00:00:00-04:00</updated><entry><title>One Stop Dev Shop pt. 2</title><link href="https://barbour-em.github.io/dev-env2.html" rel="alternate"></link><published>2016-05-27T00:00:00-04:00</published><author><name>Eric Barbour</name></author><id>tag:barbour-em.github.io,2015-08-18:dev-env2.html</id><summary type="html">&lt;h1&gt;Part two: A terminal workflow&lt;/h1&gt;
&lt;p&gt;The command line is &lt;em&gt;awesome&lt;/em&gt;; I can't think of a more productive and mature tool to do development work. Additionally, these days terminal-based tools are becoming more mainstream with CLIs for front-end package management and build tools. Quickly, it becomes a pain to manage all the different terminal windows that you have open for servers and shells etc.&lt;/p&gt;
&lt;h2&gt;Enter &lt;code&gt;Tmux&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://tmux.github.io"&gt;Tmux&lt;/a&gt;'s writers refer to it as a &lt;strong&gt;terminal multiplexer&lt;/strong&gt; but it's really more like the greatest thing since &lt;code&gt;array_slice(bread)&lt;/code&gt;. Essentially, tmux is window manager for terminal windows allowing you to split, tab, and navigate them. It also has some cool features like real time pair-programming. I was going to write a more detailed post about tmux, how I use and customize it but &lt;a href="http://www.hamvocke.com/"&gt;Ham Vocke&lt;/a&gt; wrote &lt;a href="http://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/"&gt;this&lt;/a&gt; great post and even uses parts of my &lt;code&gt;tmux.conf&lt;/code&gt; so check it out, start using it and see how it can fit your needs!&lt;/p&gt;
&lt;p&gt;As always, this &lt;code&gt;.tmux.conf&lt;/code&gt; file is synced with all of my machines and symlinked from my dotfiles directory to its location at &lt;code&gt;~/.tmux.conf&lt;/code&gt; so I only have to think about writing it once. You can see my entire config file &lt;a href="https://github.com/barbour-em/dotfiles/blob/master/home/.tmux.conf"&gt;here&lt;/a&gt; but Ham does it a lot of justice in his post.&lt;/p&gt;
&lt;h2&gt;More&lt;/h2&gt;
&lt;p&gt;Here are some more resources about tmux if you're interested:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Another &lt;a href="www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/"&gt;post&lt;/a&gt; by Ham Vocke about tmux.&lt;/li&gt;
&lt;li&gt;My &lt;a href="https://www.reddit.com/r/unixporn/comments/3cn5gi/tmux_is_my_wm_on_os_x/"&gt;post&lt;/a&gt; on &lt;a href="https://www.reddit.com/r/unixporn"&gt;/r/unixporn&lt;/a&gt; (SFW) about how I use tmux, specifically on OS X but it also applies to Linux&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/tmux"&gt;/r/tmux&lt;/a&gt; has a pretty active community.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;This post is part 2 in a series of posts I am writing about maintaining a consistent and portable
development envrionment across unix-like machines.&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;</summary><category term="terminal"></category><category term="tmux"></category></entry><entry><title>One Stop Dev Shop pt. 1</title><link href="https://barbour-em.github.io/dev-env1.html" rel="alternate"></link><published>2016-05-27T00:00:00-04:00</published><author><name>Eric Barbour</name></author><id>tag:barbour-em.github.io,2015-08-16:dev-env1.html</id><summary type="html">&lt;h1&gt;Part one: Everything in one place&lt;/h1&gt;
&lt;p&gt;A &lt;strong&gt;lot&lt;/strong&gt; of time and effort goes into creating a development environment that is productive and allows you to get down to work.
Things get even more complicated when working on more than one machine. The goal of this series is to give you tips and a starting place for a unified environment.&lt;/p&gt;
&lt;p&gt;I recently started a position where a Mac was provided and, after working exclusively on a GNU/Linux system,
I needed to have a config that I could seemlessly use between both machines. So I started building my portable Unix dev environemnt.
I wanted to share what goes into creating a complete and portable&lt;/p&gt;
&lt;h2&gt;Git&lt;/h2&gt;
&lt;p&gt;Git is intergal to almost every development team or company these days --- side note if you're not using version control yet, do it now, &lt;em&gt;seriously&lt;/em&gt; ---
and it's what holds this environment together for a number of reasons.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Anything you will be working on with more than one computer needs to be in &lt;code&gt;git&lt;/code&gt;. Then just &lt;code&gt;git push&lt;/code&gt; from one and &lt;code&gt;git pull&lt;/code&gt; from the next and you're back to work. Done. Next.&lt;/li&gt;
&lt;li&gt;Git is makes this system work. You need to have a way to have all your config files easily accessable and sync-able across machines. Git is that way.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Use a central repository&lt;/h3&gt;
&lt;p&gt;"Dotfile" repos are a common convention for developers to maintain a single place for config files.
However, they can be a lot more useful than that. &lt;a href="https://github.com/barbour-em/dotfiles"&gt;Mine&lt;/a&gt; holds things like wallpapers, screenshots, and various reminders about
using some Unix tools. Determine what will be useful or convenient for you to have everywhere and throw it in there.&lt;/p&gt;
&lt;p&gt;Clone this repository on all of your machines. Push and pull from it when changes are made. &lt;strong&gt;How easy was that?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For files that will have to live outside of the cloned repository (e.g. .vimrc, .tmux.conf, etc), the easiest way to keep these version controlled is symlinking them from
your repo, to where they have to reside. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ln -s &lt;span class="nv"&gt;$HOME&lt;/span&gt;/dotfiles/.vimrc &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.vimrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All this means for you is that you will need to remember to commit and push these changes every once in a while to keep things up to date. Better yet, use a cron job to
systematically do this for you.&lt;/p&gt;
&lt;h3&gt;Configure git&lt;/h3&gt;
&lt;p&gt;Okay, so we have all of our configurations and anything we want under git --- if you don't have any configs, don't worry, by the end of this post you will --- but let's
customize this tool we will be using a lot to make it even faster to use.&lt;/p&gt;
&lt;h4&gt;Aliases&lt;/h4&gt;
&lt;p&gt;A lot of my day is spent working directly with git. At my shop, we use a &lt;a href="https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow"&gt;git-flow&lt;/a&gt;
workflow which, for me, means a lot of branching, merging, commiting, and rebasing. Because of this, I find myself typing a lot of commands many, many times a day.
Luckily, with git there is a way to cut down on the amount of typing you have to do to get stuff done.&lt;/p&gt;
&lt;p&gt;Aliases are a &lt;em&gt;huge&lt;/em&gt; time-saver for my workflow. Here is my global &lt;code&gt;.gitconfig&lt;/code&gt; with a list of all the aliases I use.&lt;/p&gt;
&lt;script src="https://gist.github.com/barbour-em/f13eab896dffca8c28b9.js"&gt;&lt;/script&gt;

&lt;p&gt;The biggest ones are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;undo&lt;/code&gt; which reverts the last commit and is a lot easier to remember&lt;/li&gt;
&lt;li&gt;&lt;code&gt;up&lt;/code&gt; which combines some of my most typed commands into two letters to update a branch&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls&lt;/code&gt; which shows the log in a much nicer format and also takes a number of lines to stop (i.e. &lt;code&gt;git ls -10&lt;/code&gt; will show the last 10 commits)&lt;ul&gt;
&lt;li&gt;This still doesn't beat &lt;a href="https://github.com/jonas/tig"&gt;tig&lt;/a&gt;, an awesome ncurses git interface that I would recommend to anyone&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Commit template&lt;/h4&gt;
&lt;p&gt;In my &lt;code&gt;.gitconfig&lt;/code&gt; above, you'll also notice a commit template. This is something that I learned about recently but has already saved me a huge amount of time writing
commit messages. Pretty commits are important, and often necessary depending on who you're contributing to, and setting up a template that encourages this behavior
and has boilerplate written makes things a lot easier. Here is what my template looks like.&lt;/p&gt;
&lt;script src="https://gist.github.com/barbour-em/3b40a805c431a42b6181.js"&gt;&lt;/script&gt;

&lt;p&gt;Removing the octothorp (#) from the beginning of a line will make it show up in the commit and different commit stubs are already there. Just remove the comment,
add a description, add a body below the line and boom. There are also guides for line length wraps for both halves.&lt;/p&gt;
&lt;p&gt;I recommend that you take a look at what your commits usually, or should, look like and write one for yourself. Then, throw it in your &lt;code&gt;dotfiles&lt;/code&gt; push and start being more
productive!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;This post is part 1 in a series of posts I am writing about maintaining a consistent and portable
development envrionment across unix-like machines.&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;</summary><category term="devshop"></category><category term="git"></category><category term="syncing"></category></entry></feed>